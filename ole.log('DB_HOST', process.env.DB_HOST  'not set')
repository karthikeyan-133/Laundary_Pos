[33mcommit 1c01bdbf3a20ffd2cb405a8fe81ebcb562f6eb47[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: Tally POS Developer <your-email@example.com>
Date:   Tue Sep 23 01:15:11 2025 +0530

    Fix port conflict issues and improve server startup error handling

[1mdiff --git a/backend-new/server.js b/backend-new/server.js[m
[1mindex 58496ef..93b1b2a 100644[m
[1m--- a/backend-new/server.js[m
[1m+++ b/backend-new/server.js[m
[36m@@ -26,9 +26,9 @@[m [mconsole.log('Returns router loaded:', !!returnsRouter);[m
 [m
 const app = express();[m
 [m
[31m-// Use Vercel's PORT or default to 3005 for local development (changed from 3004 to avoid conflicts)[m
[32m+[m[32m// Use Vercel's PORT or default to 3002 for local development (changed from 3004 to avoid conflicts)[m
 // Vercel dynamically assigns a PORT through process.env.PORT[m
[31m-const PORT = process.env.PORT || 3005;[m
[32m+[m[32mconst PORT = process.env.PORT || 3002;[m
 console.log('Server configured to run on port:', PORT);[m
 [m
 // ✅ Custom CORS middleware to ensure headers are always set[m
[36m@@ -799,23 +799,64 @@[m [masync function startServer() {[m
     console.log('✅ Sequence counters initialized');[m
     [m
     // Start the server[m
[31m-    const PORT = process.env.PORT || 3001;[m
[31m-    app.listen(PORT, '0.0.0.0', () => {[m
[32m+[m[32m    const server = app.listen(PORT, '0.0.0.0', () => {[m
       console.log(`🚀 Server running on port ${PORT}`);[m
       console.log(`📡 Access server at: http://localhost:${PORT}`);[m
     });[m
[32m+[m[41m    [m
[32m+[m[32m    // Handle server errors[m
[32m+[m[32m    server.on('error', (err) => {[m
[32m+[m[32m      if (err.code === 'EADDRINUSE') {[m
[32m+[m[32m        console.error(`Port ${PORT} is already in use. Please close the application using that port or use a different port.`);[m
[32m+[m[32m        // Try the next available port[m
[32m+[m[32m        const nextPort = PORT + 1;[m
[32m+[m[32m        console.log(`Trying port ${nextPort}...`);[m
[32m+[m[32m        const nextServer = app.listen(nextPort, '0.0.0.0', () => {[m
[32m+[m[32m          console.log(`🚀 Server running on port ${nextPort}`);[m
[32m+[m[32m          console.log(`📡 Access server at: http://localhost:${nextPort}`);[m
[32m+[m[32m        });[m
[32m+[m[32m        nextServer.on('error', (nextErr) => {[m
[32m+[m[32m          console.error(`Port ${nextPort} is also in use. Please close applications using ports ${PORT} and ${nextPort} or use a different port.`);[m
[32m+[m[32m          process.exit(1);[m
[32m+[m[32m        });[m
[32m+[m[32m      } else {[m
[32m+[m[32m        console.error('Server error:', err);[m
[32m+[m[32m        process.exit(1);[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
   } catch (err) {[m
     console.error('❌ Database connection failed during startup:', err);[m
     console.log('\n🔧 Server will start without database connection. You can still test API endpoints.');[m
     console.log('🔧 Please check your cPanel Remote MySQL settings and IP whitelist.');[m
     [m
     // Start the server even without database connection[m
[31m-    const PORT = process.env.PORT || 3001;[m
[31m-    app.listen(PORT, '0.0.0.0', () => {[m
[32m+[m[32m    const server = app.listen(PORT, '0.0.0.0', () => {[m
       console.log(`🚀 Server running on port ${PORT} (without database connection)`);[m
       console.log(`📡 Access server at: http://localhost:${PORT}`);[m
       console.log('🔧 Database connection will be retried when API endpoints are accessed');[m
     });[m
[32m+[m[41m    [m
[32m+[m[32m    // Handle server errors[m
[32m+[m[32m    server.on('error', (err) => {[m
[32m+[m[32m      if (err.code === 'EADDRINUSE') {[m
[32m+[m[32m        console.error(`Port ${PORT} is already in use. Please close the application using that port or use a different port.`);[m
[32m+[m[32m        // Try the next available port[m
[32m+[m[32m        const nextPort = PORT + 1;[m
[32m+[m[32m        console.log(`Trying port ${nextPort}...`);[m
[32m+[m[32m        const nextServer = app.listen(nextPort, '0.0.0.0', () => {[m
[32m+[m[32m          console.log(`🚀 Server running on port ${nextPort} (without database connection)`);[m
[32m+[m[32m          console.log(`📡 Access server at: http://localhost:${nextPort}`);[m
[32m+[m[32m          console.log('🔧 Database connection will be retried when API endpoints are accessed');[m
[32m+[m[32m        });[m
[32m+[m[32m        nextServer.on('error', (nextErr) => {[m
[32m+[m[32m          console.error(`Port ${nextPort} is also in use. Please close applications using ports ${PORT} and ${nextPort} or use a different port.`);[m
[32m+[m[32m          process.exit(1);[m
[32m+[m[32m        });[m
[32m+[m[32m      } else {[m
[32m+[m[32m        console.error('Server error:', err);[m
[32m+[m[32m        process.exit(1);[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
   }[m
 }[m
 [m
